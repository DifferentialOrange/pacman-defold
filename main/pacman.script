function init(self)
	msg.post(".", "acquire_input_focus")

	self.moving = false

	self.input = vmath.vector3()
	self.dir = vmath.vector3(1, 0, 0)
	self.speed = 50
	self.moving_playback_rate = go.get("#sprite", "playback_rate")
	-- correction vector
	self.correction = vmath.vector3()
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- reset correction
	self.correction = vmath.vector3()

	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
		go.set("#sprite", "playback_rate", self.moving_playback_rate)
	else
		-- Idle animation
		go.set("#sprite", "playback_rate", 0)
	end

	local anim

	if self.dir.x > 0 then
		anim = hash("right")
	elseif self.dir.x < 0 then
		anim = hash("left")
	elseif self.dir.y > 0 then
		anim = hash("up")
	elseif self.dir.y < 0 then
		anim = hash("down")
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end

	self.input.x = 0
	self.input.y = 0

	self.moving = false
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") then
		-- Get the info needed to move out of collision. We might
		-- get several contact points back and have to calculate
		-- how to move out of all of them by accumulating a
		-- correction vector for this frame:
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	end
end
