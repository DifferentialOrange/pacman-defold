-- To make movement smooth, we allow Pac-Man to change
-- movement direction only in certain points. Without
-- that, it would be easy to stuck while trying to fit
-- into pass with width of a Pac-Man collision box.
local GRID_DIST = 32
local GRID_START = vmath.vector3(40, 40, 0)

local function is_grid_point(pos)
	if  pos.x % GRID_DIST == GRID_START.x % GRID_DIST
	and pos.y % GRID_DIST == GRID_START.y % GRID_DIST then
		return true
	end

	return false
end

local function copyv3(v)
	return vmath.vector3(v)
end

local function pos_equal(pos1, pos2)
	return pos1.x == pos2.x and pos1.y == pos2.y
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.input = vmath.vector3()
	self.dir = vmath.vector3(1, 0, 0)
	self.speed = 60 * 2
	-- correction vector
	self.correction = vmath.vector3()

	self.prev_pos = go.get_position()
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function get_dir(self)
	if self.dir.x > 0 then
		return "right"
	elseif self.dir.x < 0 then
		return "left"
	elseif self.dir.y > 0 then
		return "up"
	elseif self.dir.y < 0 then
		return "down"
	end

	return ""
end

function update(self, dt)
	-- reset correction
	self.correction = vmath.vector3()

	local pos = go.get_position()

	local idle = false
	if pos_equal(pos, self.prev_pos) then
		idle = true
	end
	self.prev_pos = copyv3(pos)

	if is_grid_point(pos) then
		-- Deepcopy vector
		self.dir = copyv3(self.input)
	end

	pos = pos + self.dir * self.speed * dt
	go.set_position(pos)

	local anim_id = get_dir(self)
	if idle then
		anim_id = "idle-" .. anim_id
	end

	local anim = hash(anim_id)

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end
end

function on_input(self, action_id, action)
	if action.pressed then
		self.input.x = 0
		self.input.y = 0
		
		if action_id == hash("up") then
			self.input.y = 1
		elseif action_id == hash("down") then
			self.input.y = -1
		elseif action_id == hash("left") then
			self.input.x = -1
		elseif action_id == hash("right") then
			self.input.x = 1
		end
	end
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") then
		-- Get the info needed to move out of collision. We might
		-- get several contact points back and have to calculate
		-- how to move out of all of them by accumulating a
		-- correction vector for this frame:
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	end
end
